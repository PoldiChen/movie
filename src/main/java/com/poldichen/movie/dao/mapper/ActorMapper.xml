<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.poldichen.movie.dao.IActorDao">

    <resultMap type="com.poldichen.movie.entity.Actor" id="actorMap">
        <id property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="birthDate" column="birth_date"/>
        <result property="nationality" column="nationality" />
        <result property="search" column="search" />
        <result property="createAt" column="create_at" />
        <result property="updateAt" column="update_at" />

        <collection property="covers" ofType="com.poldichen.movie.entity.Cover">
            <id property="id" column="cover_id"/>
            <result property="path" column="cover_path"/>
            <result property="fileName" column="cover_file_name"/>
            <result property="extension" column="cover_extension"/>
            <result property="size" column="cover_size"/>
        </collection>

    </resultMap>

    <select id="getAll" resultMap="actorMap">
        select a.*, c.id as cover_id, c.path as cover_path, c.file_name as cover_file_name, c.extension as cover_extension, c.size as cover_size
        from actor a left join actor_cover ac on a.id = ac.actor_id
        left join cover c on c.id = ac.cover_id
    </select>

    <select id="getByName" resultMap="actorMap">
        select a.*, c.id as cover_id, c.path as cover_path, c.file_name as cover_file_name, c.extension as cover_extension, c.size as cover_size
        from actor a left join actor_cover ac on a.id = ac.actor_id
        left join cover c on c.id = ac.cover_id
        where a.name like concat('%', #{actorName}, '%')
    </select>

    <select id="getById" resultType="com.poldichen.movie.entity.Actor">
        SELECT * from actor where id = #{id}
    </select>

    <insert id="createOne" parameterType="com.poldichen.movie.entity.Actor" useGeneratedKeys="true" keyProperty="actor.id">
        insert into actor (name, birth_date, nationality, search, create_at, update_at)
        values (#{actor.name}, #{actor.birthDate}, #{actor.nationality}, #{actor.search}, NOW(), NOW())
    </insert>

    <update id="update">
        update actor
        set name = #{actor.name}, birth_date = #{actor.birthDate}, nationality = #{actor.nationality}, search = #{actor.search}, update_at = NOW()
        where id = #{id}
    </update>




</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.poldichen.movie.dao.IMovieDao">

    <resultMap id="movieMap" type="com.poldichen.movie.entity.Movie">
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <collection property="actors" ofType="com.poldichen.movie.entity.Actor"
                    javaType="java.util.List" select="getActorByMovieId" column="{movieId=id}">
            <result column="id" property="id"/>
            <result column="name" property="name"/>
        </collection>

        <collection property="covers" ofType="com.poldichen.movie.entity.Picture"
                    javaType="java.util.List" select="getCoverByMovieId" column="{movieId=id}">
            <result column="id" property="id"/>
            <result column="path" property="path"/>
            <result column="file_name" property="fileName"/>
            <result column="url" property="url"/>
        </collection>
    </resultMap>

    <select id="getActorByMovieId" parameterType="map" resultType="com.poldichen.movie.entity.Actor">
        select a.*
        from actor a
        left join movie_actor ma on a.id = ma.actor_id
        where ma.movie_id = #{movieId}
    </select>

    <select id="getCoverByMovieId" parameterType="map" resultType="com.poldichen.movie.entity.Picture">
        select p.*
        from picture p
        left join movie_cover mc on p.id = mc.picture_id
        where mc.movie_id = #{movieId}
    </select>

    <select id="getAll" resultMap="movieMap" parameterType="hashmap">
        select m.*
        from movie m
        where 1 = 1
        <if test="code != null and code != '' "> and m.code like concat('%', #{code}, '%')</if>
        <if test="name != null and name != '' "> and m.name like concat('%', #{name}, '%')</if>
    </select>

    <select id="getById" resultMap="movieMap">
        SELECT m.*, v.id as video_id, v.name as video_name
        FROM movie m left join movie_video mv on m.id = mv.movie_id
        left join video v on mv.video_id = v.id
        where m.id = #{id}
    </select>

    <insert id="createOne" parameterType="com.poldichen.movie.entity.Movie" useGeneratedKeys="true" keyProperty="movie.id" keyColumn="id">
        insert into movie (code, name, publish_date, length, type, director, producer, publisher, create_at, update_at)
        values (#{movie.code}, #{movie.name}, #{movie.publishDate}, #{movie.length}, #{movie.type},
        #{movie.director}, #{movie.producer}, #{movie.publisher}, NOW(), NOW())
    </insert>

    <update id="update">
        update movie
        set code = #{movie.code}, name = #{movie.name}, publish_date = #{movie.publishDate},
        length = #{movie.length}, type = #{movie.type}, director = #{movie.director}, producer = #{movie.producer}, publisher = #{movie.publisher}, update_at = NOW()
        where id = #{id}
    </update>

    <delete id="deleteMovieActor">
        delete from movie_actor where movie_id = #{movie_id}
    </delete>

    <insert id="addMovieActor" parameterType="int" useGeneratedKeys="true" keyProperty="movie.id">
        insert into movie_actor (movie_id, actor_id)
        values (#{movie_id}, #{actor_id})
    </insert>

    <delete id="deleteMovieCover">
        delete from movie_cover where movie_id = #{movie_id}
    </delete>

    <insert id="addMovieCover" parameterType="int" useGeneratedKeys="true" keyProperty="movie.id">
        insert into movie_cover (movie_id, picture_id)
        values (#{movie_id}, #{picture_id})
    </insert>

    <delete id="deleteMovieCoverDetail">
        delete from movie_cover_detail where movie_id = #{movie_id}
    </delete>

    <insert id="addMovieCoverDetail" parameterType="int" useGeneratedKeys="true" keyProperty="movie.id">
        insert into movie_cover_detail (movie_id, picture_id)
        values (#{movie_id}, #{picture_id})
    </insert>

    <delete id="deleteMovieScreenshot">
        delete from movie_screenshot where movie_id = #{movie_id}
    </delete>

    <insert id="addMovieScreenshot" parameterType="int" useGeneratedKeys="true" keyProperty="movie.id">
        insert into movie_screenshot (movie_id, picture_id)
        values (#{movie_id}, #{picture_id})
    </insert>

    <delete id="deleteMovieResource">
        delete from movie_resource where movie_id = #{movie_id}
    </delete>

    <insert id="addMovieResource" parameterType="int" useGeneratedKeys="true" keyProperty="movie.id">
        insert into movie_resource (movie_id, resource_id)
        values (#{movie_id}, #{resource_id})
    </insert>


</mapper>